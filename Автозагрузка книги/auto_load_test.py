import pytest
import allure
from TasCUtils import stp, user_input

@allure.epic("Модуль Шахматка")
@allure.feature("Автозагрузка книги")
@allure.story("Автозагрузка книги")
@allure.link("http://example-link", name="null")
@allure.title("Автозагрузка книги")

class Test_checkbox_functional: #Проверка функциональности чекбокса  для автозагрузки книг.
    @stp("Открыть модуль с организацием книг в виде карточек", "В открытой странице в карточках все чекбоксы по умолчанию не выбраны.")
    @stp("Щелкнуть на любой чекбокс из списка книг для выбора Автозагрузки", "При одноразовом нажатии на чекбокс, он отображается как выбранный.")
    @stp("Вернуться в модуль с с организацием книг в виде карточек", "На странице также отображается выбранный чекбокс. Выбранная книга для автозагрузки загрузилась в отдельной вкладке.")
    @stp("Щелкнуть повторно на чекбокс для отмены выбора автозагрузки и выбрать все остальные книги для автозагрузки", "Чекбокс больше не отображается, как выбранный, но вкладка с сохраненной книгой осталась, а также открылись все остальные выбранные книги.")
    @stp("Обновить страницу.", "После обновления страницы,  открывается только новые выбранные книги для автозагрузки. При выборе нескольких чекбоксов, автозагрузка происходит корректно.")
    @stp("Перейти из модуля с организацием книг в виде карточек  в таблицу", "При переходе из модуля в виде карточек в таблицу, все выбранные ранее чекбоксы должны сохраниться.")
    def test_main(self):
        assert user_input(), "Все ОР соответствуют"

class Test_editing_books_after_refresh: #Редактирование книг в таблице после выбора функции автозагрузка.
    @stp("Открыть модуль с организацием книг в виде карточек", "Ранее выбранные книги для автозагрузки сохранились в отдельной вкладке . Данные сохраненной книги отображаются корректно")
    @stp("Вернуться в таблицу со всеми книгами, и нажать на иконку редактировать, выбранной книги.", "Иконка редактировать активна, открывается окно редактирования книги.")
    @stp("Изменить и сохранить название книги в открытом окне для редактирования.", "Измененная информация сохраняется.")
    @stp("Перейти во вкладку с загруженной книгой и обновить страницу.", "Страница успешно обновляется.")
    @stp("Проверить в обновленной странице изменилась ли информация о книге.", "Новое название книги отображается корректно во вкладке с загруженной книгой.")
    @stp("Проверить корректно ли отображается измененное название книги в модуле в виде карточек", "Новое название отображается корректно при перехода из таблицы в модуль с карточками.")
    def test_main(self):
        assert user_input(), "Все ОР соответствуют"

class Test_new_book_functional: #Проверка автозагрузки в новых добавленных книгах.
    @stp("Нажать на кнопку [+Книга]", "Открывается окно для создании новой книги.")
    @stp("Заполнить все необходимые поля для создания книги [Книга1] и сохранить изменения.", "Книга успешно создана и имеет чекбокс автозагрузки.")
    @stp("Щелкнуть на чекбокс  для выбора Автозагрузки в созданной книге", "Чекбокс активен. Новая книга автоматически загрузится, после обновления страницы, в новой вкладке")
    @stp("Создать копию новой книги и сохранить ее как [Книга2]", "Копия книги успешно сохраняется, чекбокс автозагрузки не активен в копии.")
    @stp("На страницу с таблицей книг, нажать на иконку удалить книгу [Книга1]", "Выбранная книга удаляется.")
    @stp("Обновить открытую страницу [Книга1]", "При обновлении страницы удаленной книги, отображается системная ошибка 404.")
    def test_main(self):
        assert user_input(), "Все ОР соответствуют"

class Test_auto_load_more10_books: #Корректность автозагрузки от 10 книг 
    @stp("Выбрать режим автозагрузки для 10 книг из таблицы.", "Каждая книга сохраняется в отдельной вкладке браузера.")
    @stp("Обновить страницу с таблицей", "Выбранные книги для автозагрузки открываются в отдельной вкладке.")
    def test_main(self):
        assert user_input(), "Все ОР соответствуют"